#!/bin/bash

### FUNCTIONS ###
# Function to install cmake
install_cmake() {
    if ! command -v cmake >/dev/null 2>&1; then
        echo "[cmake] CMake is not installed"

        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "[cmake] Attempting to install CMake..."
            sudo apt-get update && sudo apt-get install -y cmake
            return $?
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            echo "[cmake] Attempting to install CMake..."
            if command -v brew >/dev/null 2>&1; then
                brew install cmake
                return $?
            else
                echo "[cmake] Homebrew is not installed. Please install CMake manually"
                return 1
            fi
        else
            echo "[cmake] Automatic installation of CMake is not supported on this OS"
            echo "[cmake] Please install CMake manually"
            return 1
        fi
    else
        echo "[cmake] CMake is already installed"
        return 0
    fi
}

# Function to check and install OpenGL
install_opengl() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # linux
        LIBGL_PATH=$(ldconfig -p | grep "libGL.so" | head -n1 | awk '{print $4}')
        if [[ -f "/usr/include/GL/gl.h" && -n "$LIBGL_PATH" ]]; then
            echo "[opengl] OpenGL is already installed"
        else
            echo "[opengl] OpenGL is not installed"
            echo "[opengl] Attempting to install OpenGL..."
            sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev
        fi

    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if [ -e "/System/Library/Frameworks/OpenGL.framework" ]; then
            echo "[opengl] OpenGL framework found"
        else
            echo "[opengl] OpenGL not found. It's required and usually provided by macOS."
            echo "          If you're using a custom toolchain, ensure it links against the system OpenGL framework:"
            echo "          /System/Library/Frameworks/OpenGL.framework"
        fi

    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        # windows (MSYS2)
        if ! command -v pacman >/dev/null 2>&1; then
            echo "[opengl] Pacman is not installed. Please install OpenGL manually"
            return 1
        fi

        if pacman -Q mingw-w64-x86_64-opengl &>/dev/null; then
            echo "[opengl] OpenGL is already installed"
        else
            echo "[opengl] OpenGL is not installed"
            echo "[opengl] Attempting to install OpenGL..."
            pacman -S --noconfirm mingw-w64-x86_64-opengl
        fi


    else
        echo "[opengl] Automatic installation of OpenGL is not supported on this OS"
        echo "[opengl] Please install OpenGL manually"
        return 1
    fi
}

# Function to check and install libudev (Linux only)
install_udev() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        local has_so=false
        local has_header=false

        if ldconfig -p | grep -q "libudev.so"; then
            has_so=true
        fi

        if [[ -f "/usr/include/libudev.h" || -f "/usr/include/udev/libudev.h" ]]; then
            has_header=true
        fi

        if [[ "$has_so" == true && "$has_header" == true ]]; then
            echo "[udev] UDev is already installed"
        else
            echo "[udev] UDev is not installed"
            echo "[udev] Attempting to install UDev..."
            sudo apt-get update && sudo apt-get install -y libudev-dev
        fi
    else
        echo "[udev] UDev is not necessary on this OS"
    fi
}

# Function to check and install OpenAL
install_openal() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        local has_so=false
        local has_header=false

        if ldconfig -p | grep -q "libopenal.so"; then
            has_so=true
        fi

        if [[ -f "/usr/include/AL/al.h" ]]; then
            has_header=true
        fi

        if [[ "$has_so" == true && "$has_header" == true ]]; then
            echo "[openal] OpenAL is already installed"
        else
            echo "[openal] OpenAL is not installed"
            echo "[openal] Attempting to install OpenAL..."
            sudo apt-get update && sudo apt-get install -y libopenal-dev
        fi

    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if [ -d "/System/Library/Frameworks/OpenAL.framework" ]; then
            echo "[openal] OpenAL framework found"
        else
            echo "[openal] OpenAL framework not found"
            echo "[openal] Attempting to install OpenAL..."
            if command -v brew >/dev/null 2>&1; then
                brew install openal-soft
            else
                echo "[openal] Homebrew not installed. Please install OpenAL manually"
                return 1
            fi
        fi

    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        if ! command -v pacman >/dev/null 2>&1; then
            echo "[openal] Pacman is not installed. Please install OpenAL manually"
            return 1
        fi

        if pacman -Q mingw-w64-x86_64-openal &>/dev/null; then
            echo "[openal] OpenAL is already installed"
        else
            echo "[openal] Attempting to install OpenAL..."
            pacman -S --noconfirm mingw-w64-x86_64-openal
        fi

    else
        echo "[openal] Automatic installation of OpenAL is not supported on this OS"
        echo "[openal] Please install OpenAL manually"
        return 1
    fi
}

# Function to check and install vorbis
install_vorbis() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        local has_so=false
        local has_header=false

        if ldconfig -p | grep -q "libvorbis.so"; then
            has_so=true
        fi

        if [[ -f "/usr/include/vorbis/vorbisfile.h" ]]; then
            has_header=true
        fi

        if [[ "$has_so" == true && "$has_header" == true ]]; then
            echo "[vorbis] VORBIS is already installed"
        else
            echo "[vorbis] VORBIS is not installed"
            echo "[vorbis] Attempting to install VORBIS..."
            sudo apt-get update && sudo apt-get install -y libvorbis-dev
        fi

    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if command -v brew >/dev/null 2>&1; then
            if brew list | grep -q "^libvorbis$"; then
                echo "[vorbis] VORBIS is already installed"
            else
                echo "[vorbis] Attempting to install VORBIS..."
                brew install libvorbis
            fi
        else
            echo "[vorbis] Homebrew not installed. Please install VORBIS manually"
            return 1
        fi

    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        if ! command -v pacman >/dev/null 2>&1; then
            echo "[vorbis] Pacman is not installed. Please install VORBIS manually"
            return 1
        fi

        if pacman -Q mingw-w64-x86_64-libvorbis &>/dev/null; then
            echo "[vorbis] VORBIS is already installed"
        else
            echo "[vorbis] Attempting to install VORBIS..."
            pacman -S --noconfirm mingw-w64-x86_64-libvorbis
        fi

    else
        echo "[vorbis] Automatic installation of VORBIS is not supported on this OS"
        echo "[vorbis] Please install VORBIS manually"
        return 1
    fi
}

# Function to check and install clang tools
install_clang_tool() {
    local tool="$1"
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "[clang] $tool is not installed"

        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "[clang] Attempting to install $tool on Linux..."
            sudo apt-get update && sudo apt-get install -y clang-format clang-tidy
            return $?
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            echo "[clang] Attempting to install $tool on macOS..."
            if command -v brew >/dev/null 2>&1; then
                brew install llvm
                return $?
            else
                echo "[clang] Homebrew is not installed. Please install $tool manually"
                return 1
            fi
        else
            echo "[clang] Automatic installation of $tool is not supported on this OS"
            echo "[clang] Please install $tool manually"
            return 1
        fi
    else
        echo "[clang] $tool is already installed"
        return 0
    fi
}

# Function to install the pre-commit hook
install_precommit_hook() {
    local HOOK_SOURCE="scripts/pre-commit"
    local HOOK_TARGET=".git/hooks/pre-commit"

    # Ensure we are in a Git repository
    if [ ! -d ".git" ]; then
        echo "[hooks] This script must be run from the root of a Git repository"
        return 1
    fi

    # Check if the source hook script exists
    if [ ! -f "$HOOK_SOURCE" ]; then
        echo "[hooks] Hook script not found at $HOOK_SOURCE"
        return 1
    fi

    # Copy the pre-commit hook and make it executable
    cp "$HOOK_SOURCE" "$HOOK_TARGET"
    chmod +x "$HOOK_TARGET"

    echo "[hooks] Pre-commit hook installed at $HOOK_TARGET"
    return 0
}


### SETUP ###
# CMake
echo "Checking CMake..."
install_cmake
cmake_status=$?

## SFML required ##
# OpenGL
echo "Checking OpenGL..."
install_opengl
opengl_status=$?

# UDev
echo "Checking UDev..."
install_udev
udev_status=$?

# OpenAL
echo "Checking OpenAL..."
install_openal
openal_status=$?

# VORBIS
echo "Checking VORBIS..."
install_vorbis
vorbis_status=$?

## Clang tools ##
echo "Checking clang tools..."
install_clang_tool clang-format
clang_format_status=$?
install_clang_tool clang-tidy
clang_tidy_status=$?

# Tools summary
if [[ $cmake_status -ne 0 || $opengl_status -ne 0 || $udev_status -ne 0 || $openal_status -ne 0 || $vorbis_status -ne 0 || $clang_format_status -ne 0 || $clang_tidy_status -ne 0 ]]; then
    echo "Failed to install some tools"
    echo "Please review the messages above and install them manually if needed"
else
    echo "All required tools are installed"
fi

# Hooks
echo "Setting hooks..."

if install_precommit_hook; then
    echo "All required hooks are installed"
else
    echo "Failed to install some hooks"
    echo "Please review the messages above and install them manually if needed"
    exit 1
fi

echo -e "\nSetup complete"