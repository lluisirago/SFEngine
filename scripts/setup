#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

### GLOBALS ###
LOG_FILE="./logs/setup_$(date +%d%m%Y_%H%M%S).log"


### ERROR HANDLING ###
error_handler() {
    local exit_code=$?
    local line_number=$1
    echo "[ERROR] Script failed at line $line_number (exit code $exit_code)" | tee -a "$LOG_FILE"
    echo "[ERROR] Check the log file at $LOG_FILE for details."
    exit $exit_code
}
trap 'error_handler $LINENO' ERR

log() {
    echo "[INFO] $1" | tee -a "$LOG_FILE"
}

warn() {
    echo "[WARN] $1" | tee -a "$LOG_FILE"
}

### FUNCTIONS ###

install_cmake() {
    if ! command -v cmake >/dev/null 2>&1; then
        log "CMake is not installed"

        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            log "Attempting to install CMake..."
            sudo apt-get update && sudo apt-get install -y cmake
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            log "Attempting to install CMake..."
            if command -v brew >/dev/null 2>&1; then
                brew install cmake
            else
                warn "Homebrew not found. Please install CMake manually."
                return 1
            fi
        else
            warn "Unsupported OS for automatic CMake installation"
            return 1
        fi
    else
        log "CMake is already installed"
    fi
}

install_sfml() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if dpkg -s libsfml-dev &>/dev/null; then
            log "SFML is already installed"
        else
            log "Installing SFML on Linux..."
            sudo apt-get update && sudo apt-get install -y libsfml-dev
        fi

    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if brew list sfml &>/dev/null; then
            log "SFML is already installed"
        else
            log "Installing SFML on macOS..."
            if command -v brew >/dev/null 2>&1; then
                brew install sfml
            else
                warn "Homebrew not found. Please install SFML manually."
                return 1
            fi
        fi

    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin"* ]]; then
        # 1. Verificar si pacman puede detectarlo
        if command -v pacman &>/dev/null; then
            if pacman -Q mingw-w64-x86_64-sfml &>/dev/null; then
                log "SFML is already installed"
                return 0
            fi
        fi

        # 2. Buscar instalación manual de SFML en "C:/Program Files"
        for dir in /c/Program\ Files/SFML*; do
            if [[ -d "$dir/include/SFML" && -d "$dir/lib" ]]; then
                log "SFML found in '$dir'"
                export CMAKE_PREFIX_PATH="$dir"
                return 0
            fi
        done

        # 3. Verificar rutas comunes de MSYS2
        if ls /mingw64/lib/libsfml* &>/dev/null || ls /usr/lib/libsfml* &>/dev/null; then
            log "SFML found in MSYS2 standard directories"
            return 0
        fi

        # 4. No se encontró
        warn "SFML not detected. Please install it manually from https://www.sfml-dev.org/download.php (v2.6.1)"
        warn "Expected to find it under: 'C:/Program Files/SFML-*"
        return 1


    else
        warn "Unsupported OS for automatic SFML installation"
        return 1
    fi
}

install_clang_tool() {
    local tool="$1"

    if ! command -v "$tool" >/dev/null 2>&1; then
        log "$tool is not installed"

        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            log "Installing $tool on Linux..."
            sudo apt-get update && sudo apt-get install -y clang-format clang-tidy
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            log "Installing $tool on macOS..."
            if command -v brew >/dev/null 2>&1; then
                brew install llvm
            else
                warn "Homebrew not found. Please install $tool manually."
                return 1
            fi
        else
            warn "Unsupported OS for automatic installation of $tool"
            return 1
        fi
    else
        log "$tool is already installed"
    fi
}

install_precommit_hook() {
    local HOOK_SOURCE="scripts/pre-commit"
    local HOOK_TARGET=".git/hooks/pre-commit"

    if [ ! -d ".git" ]; then
        warn "This script must be run from the root of a Git repository"
        return 1
    fi

    if [ ! -f "$HOOK_SOURCE" ]; then
        warn "Hook script not found at $HOOK_SOURCE"
        return 1
    fi

    cp "$HOOK_SOURCE" "$HOOK_TARGET"
    chmod +x "$HOOK_TARGET"
    log "Pre-commit hook installed"
}

### MAIN EXECUTION ###

log "--- Starting Setup ---"

log "Checking CMake..."
install_cmake

log "Checking SFML..."
install_sfml

log "Checking Clang tools..."
install_clang_tool clang-format
install_clang_tool clang-tidy

log "Installing Git hooks..."
install_precommit_hook

log "--- Setup Complete ---"
